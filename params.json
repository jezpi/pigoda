{
  "name": "Pigoda",
  "tagline": "Weather station project",
  "body": "# pigoda - Introduction\r\nSensing station project on Raspberry Pi. The project is divided into\r\nsoftware (i.e. mqtt_rpi, mqtt_channel, and rrdtool handling scripts) and\r\nhardware - boards design as well as design of 3D printed pieces (n/a yet).\r\n\r\nThe version available on github still have lots of defaults from my\r\npersonal lab. *IT IS NOT RECOMMENDED TO RUN IT WITHOUT LOOKING INTO\r\nTHE SOURCE CODE AND CONFIGURATION FILE*\r\n\r\n\r\n## The software\r\nThe standard installation assumes that You have two machines, one is a \r\nraspberry pi which sensors connected to specified pins and second is\r\na mosquitto server which broadcasts information on a configured channel.\r\n### mqtt_rpi\r\n#### Introduction\r\n\r\nmqtt_rpi is \r\n#### Status:\r\nReady to use version is available. However it's missing some documentation\r\n\r\nPart | Task |  Priority\r\n-----|------|--------\r\nmqtt_rpi, mqtt_channel|Reconnecting on MQTT error | High \r\nmqtt_pir, mqtt_rf | Both need to integrate with mqtt_rpi | High\r\nnew pigoda v2 board | redesign, include more gpio protection (with optocoupler and or overcurrent protection)| design ongoing\r\nwebsite | has to be done | High\r\nmqtt_channel | Change database engine to MySQL from Sqlite3 | Medium\r\nmqtt_channel | code checkout | Low\r\n3D models | Models for boxes used to isolate sensors etc. | Low \r\n\r\n### How it really works?!\r\n\r\n![graph](https://jezpi.github.io/pigoda/pigoda_howto.svg)\r\n\r\n**The basic knowledge about MQTT protocol is required**\r\n**More info on https://github.com/mqtt/mqtt.github.io/wiki**\r\n\r\nThere are 4 applications:\r\n\r\n* mqtt_rpi - Gets the data from sensors, process it, and publish on _MQTT_ channel.\r\n* mqtt_channel -  Listens on a given channel and stores the obtained data to Sqlite3 database.\r\n* mqtt_pir - Gets statistics from pir sensor and publish it on a given _MQTT_ channel.\r\n* mqtt_rf - Gets statistics from  nRF24+ and pushish it on a given _MQTT_ channel.\r\n\r\n#### How to use it?\r\nDownload the source repository, compile* the sources and install it:\r\n\r\n```\r\ngit clone https://github.com/jezpi/pigoda\r\ncd mqtt_rpi\r\nmake && make install\r\n```\r\n\r\nthere are some dependencies like libyaml libmosquitto libsqlite3 and libbsd\r\nThe application is located in /usr/bin/mqtt_rpi. It installs the configuration\r\nfile placed in /etc/mqtt_rpi.yaml. The syntax is a YAML syntax. You need a MQTT\r\nserver which defaults to 172.17.17.4, change it to Your server. You have to configure\r\ndaemon mode in /etc/mqtt_rpi.yaml ( *mqtt_rpi* does not detach from terminal by default and it prints loads\r\nof debug messages) like this:\r\n\r\n<code>\r\ndaemon: true\r\n</code>\r\n\r\n### mqtt_channel\r\nReady to use/develop version is available and there's no documentation \r\n\r\nWorking version available\r\n\r\n### mqtt_pir\r\n\r\nReady to use/develop version is available\r\n\r\n### mqtt_rf\r\nUnder development (Proof of concept version already works and stores data into db, however\r\nthe code needs to be polished a bit)\r\n\r\n\r\n\r\n\r\n## The hardware\r\n### pinheader board\r\nIn a directory eagle of github repository there are available boards designs ready to fabricate.\r\nThe width of connections is thick on purpose. More information will be available soon.\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}